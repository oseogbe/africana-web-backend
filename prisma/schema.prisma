// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              String     @id @default(uuid())
  firstName       String
  lastName        String
  companyName     String?
  email           String     @unique
  emailVerifiedAt DateTime?
  password        String?
  phone           String?    @unique
  address1        String?
  address2        String?
  postalCode      String?
  city            String?
  state           String?
  country         String?
  refreshToken    String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  order           Order[]
  cart            Cart[]
  payment         Payment[]
  wishlist        Wishlist[]
}

model Admin {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  emailVerifiedAt DateTime?
  password        String
  phone           String?   @unique
  refreshToken    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Category {
  id        Int        @id @default(autoincrement())
  parentId  Int?
  parent    Category?  @relation("ChildCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("ChildCategory")
  name      String
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Currency {
  id           Int       @id @default(autoincrement())
  code         String    @unique
  name         String
  exchangeRate Decimal   @db.Decimal(6, 4)
  isDefault    Boolean   @default(false)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  product      Product[]
  payment      Payment[]
}

model Product {
  id               String           @id @default(uuid())
  name             String
  slug             String           @unique
  description      String           @db.Text
  categories       Category[]
  tags             Tag[]
  rating           Decimal?
  lowOnStockMargin Int
  currency         Currency         @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId       Int
  isFeatured       Boolean          @default(false)
  totalQuantity    Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  productVariants  ProductVariant[]
  productImages    ProductImage[]
  productReviews   ProductReview[]
  ProductView      ProductView[]
}

model ProductVariant {
  id        String      @id @default(uuid())
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  sku       String      @unique
  size      String
  color     String?
  price     Int
  oldPrice  Int?
  quantity  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  orderItem OrderItem[]
  cartItem  CartItem[]
  wishlist  Wishlist[]

  @@unique([productId, size, color])
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  isDefault Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReview {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  comment   String?  @db.Text
  stars     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductView {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  visitors  Visitor[]
}

model Visitor {
  id            Int         @id @default(autoincrement())
  productView   ProductView @relation(fields: [productViewId], references: [id], onDelete: Cascade)
  productViewId Int
  visitor       String
}

model Cart {
  id         String     @id @default(uuid())
  user       String?    @unique
  customer   Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?
  expiresAt  DateTime
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  cartItem   CartItem[]
  order      Order?
}

model CartItem {
  id               String         @id @default(uuid())
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId           String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  pricePerItem     Int
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([cartId, productVariantId])
}

model Tax {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  value     Decimal  @db.Decimal(3, 1)
  type      TaxType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id         String      @id @default(uuid())
  code       String      @unique
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  cart       Cart?       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String?     @unique
  subTotal   Int
  tax        Tax?        @relation(fields: [taxId], references: [id], onDelete: Cascade)
  taxId      Int?
  total      Int
  address1   String?
  address2   String?
  postalCode String?
  city       String?
  state      String?
  country    String?
  notes      String?     @db.Text
  status     OrderStatus @default(Pending)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  payment    Payment[]
}

model OrderItem {
  id               String         @id @default(uuid())
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  pricePerItem     Int
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Payment {
  id          String        @id @default(uuid())
  customer    Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String?
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  channel     String
  reference   String        @unique
  currency    Currency      @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId  Int
  amount      Decimal       @db.Decimal(12, 1)
  meta        Json?
  status      PaymentStatus @default(Pending)
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Wishlist {
  id               String         @id @default(uuid())
  customer         Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String?
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// enum Role {
//   Customer
//   Admin
//   SuperAdmin
// }

enum TaxType {
  Percentage
  FixedAmount
}

enum OrderStatus {
  Pending
  Completed
  Failed
  Shipped
  Delivered
}

enum PaymentStatus {
  Pending
  Successful
  Failed
}
